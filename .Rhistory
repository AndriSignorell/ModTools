r.rf <- FitMod(mdiab, data=d.pim$train, fitfn="randomForest")
r.svm <- FitMod(mdiab, data=d.pim$train, fitfn="svm")
r.c5 <- FitMod(mdiab, data=d.pim$train, fitfn="C5.0")
r.nn <- FitMod(mdiab, data=d.pim$train, fitfn="nnet")
r.nb <- FitMod(mdiab, data=d.pim$train, fitfn="naive_bayes")
r.lda <- FitMod(mdiab, data=d.pim$train, fitfn="lda")
r.qda <- FitMod(mdiab, data=d.pim$train, fitfn="qda")
r.lb <- FitMod(mdiab, data=d.pim$train, fitfn="lb")
mods <- list(glm=r.glm, rp=r.rp, rf=r.rf, svm=r.svm, c5=r.c5
, nn=r.nn, nb=r.nb, lda=r.lda, qda=r.qda, lb=r.lb)
# insight in the Regression tree
plot(r.rp, box.palette = as.list(Pal("Helsana", alpha = 0.5)))
# Insample accuracy ...
TModC(mods, ord="auc")
# Insample accuracy ...
TModC(mods[1:5], ord="auc")
# Insample accuracy ...
TModC(mods[1:3], ord="auc")
# Insample accuracy ...
TModC(mods[1:2], ord="auc")
# Insample accuracy ...
TModC(mods[1:3], ord="auc")
# Insample accuracy ...
TModC(mods[3], ord="auc")
# Insample accuracy ...
TModC(mods[1], ord="auc")
# Insample accuracy ...
TModC(mods[2], ord="auc")
# Insample accuracy ...
TModC(mods[3], ord="auc")
# Insample accuracy ...
TModC(mods[-3], ord="auc")
# Insample accuracy ...
TModC(mods[c(1,2,4,5)], ord="auc")
# Insample accuracy ...
TModC(mods[c(1,2,4)], ord="auc")
# Insample accuracy ...
TModC(mods[c(1,2,5)], ord="auc")
# Insample accuracy ...
TModC(mods[c(1,2)], ord="auc")
# Insample accuracy ...
TModC(mods[c(1,2,6)], ord="auc")
# Insample accuracy ...
TModC(mods[c(1,2,7)], ord="auc")
# Insample accuracy ...
TModC(mods[c(2)], ord="auc")
# Insample accuracy ...
TModC(mods[c(3)], ord="auc")
debug(TModC)
# Insample accuracy ...
TModC(mods[c(3)], ord="auc")
undebug(TModC)
BrierScore(r.rf)
BrierScore
debug(BrierScore)
BrierScore(r.rf)
r.rf
summary(r.rf)
DescTools::Desc(r.rf)
BrierScore
r.rf
model.extract(r.rf, "response")
head(r.glm$model)
data_name = getCall(r.rf)$data
eval(data_name)
head(eval(data_name)
)
BrierScore
head(eval(data_name))
DescTools::Str(r.rf, max.level=1)
model.response(model.frame(r.rf))
model.frame(r.rf)
model.response(model.frame(r.rf))
BrierScore
r.rp$model
model.extract(r.rp$model, "response")
as.numeric(model.extract(r.rp$model, "response")) - 1
model.response(model.frame(r.rp))
as.numeric(model.response(model.frame(r.rp)) - 1
as.numeric(model.response(model.frame(r.rp))) - 1
as.numeric(model.extract(r.rp$model, "response")) - 1
as.numeric(model.response(model.frame(r.rp))) - 1
as.numeric(model.response(model.frame(r.glm))) - 1
as.numeric(model.response(model.frame(r.rp))) - 1
as.numeric(model.response(model.frame(r.rf))) - 1
as.numeric(model.response(model.frame(r.svm))) - 1
as.numeric(model.response(model.frame(r.c5))) - 1
model.frame(r.c5)
r.c5
as.numeric(model.response(model.frame(r.nn))) - 1
r.naive_bayes
r.nb
as.numeric(model.response(model.frame(r.nb))) - 1
as.numeric(model.response(model.frame(r.lda))) - 1
as.numeric(model.response(model.frame(r.qda))) - 1
as.numeric(model.response(model.frame(r.lb))) - 1
as.numeric(model.extract(r.c5$model, "response")) - 1
r.c5$model
data_name = getCall(r.c5)$data
eval(data_name)
model.extract(r.c5$model, "response")
ModTools::Response
model.response(model.frame(eval(x$call$formula)$terms))
model.response(model.frame(eval(r.rf$call$formula)$terms))
r.rf$call$formula
eval(r.rf$call$formula)
eval(r.rf$call$formula)$terms
x <- r.rf
x$terms <- eval(x$call$formula)
x$terms
model.response(model.frame(x))
resp <- function(x){
x$terms <- eval(x$call$formula)
model.response(model.frame(x))
}
resp(r.rp)
resp(r.glm)
resp(r.rf)
resp(r.svm)
resp(r.nn)
resp(r.lda)
resp(r.qda)
resp(r.c5)
resp(r.lb)
resp(r.c5)
resp(r.nb)
BrierScore
NumResponse <- function(x){
x$terms <- eval(x$call$formula)
as.numeric(model.response(model.frame(x))) - 1
}
NumResponse(r.glm)
NumResponse <- function(x){
x$terms <- eval(x$call$formula)
as.numeric(model.response(model.frame(x))) - 1
}
deps <- list(
A = c("B", "C", "D"),
B = c("C", "E"),
C = c("D", "F"),
D = c("C", "G"),
E = c("A"),
H = c("N")
)
get_all_deps <- function(item) {
todo <- unique(deps[[item]])
rval <- character()
while (length(todo) > 0) {
subitem <- todo[1]
todo <- todo[-1]
if (subitem != item) {  # don't add start item to the list
rval <- unique(c(rval, subitem))
to_add <- setdiff(deps[[subitem]], rval)
todo <- unique(c(todo, to_add))
}
}
return(sort(rval))
}
print(get_all_deps('A'))
print(get_all_deps('E'))
install.packages(c("AER", "broom", "car", "httr2", "memisc", "robustbase"))
library(DescTools)
set.seed(1)
x <- rt(100, df = 3)
y <- rt(100, df = 5)
HodgesLehmann(x)
#> [1] -0.04253799
HodgesLehmann(x, y)
# same as
wilcox.test(x, conf.int = TRUE)$estimate
x[1:5]
HodgesLehmann(x[1:5])
wilcox.test(x[1:5], conf.int = TRUE)$estimate
HodgesLehmann(x[1:50])
HodgesLehmann(x[1:50])
HodgesLehmann(x[1:90])
wilcox.test(x[1:90], conf.int = TRUE)$estimate
HodgesLehmann(x[1:80])
wilcox.test(x[1:80], conf.int = TRUE)$estimate
HodgesLehmann(x[1:70])
wilcox.test(x[1:70], conf.int = TRUE)$estimate
HodgesLehmann(x[1:60])
wilcox.test(x[1:60], conf.int = TRUE)$estimate
HodgesLehmann(x[1:50])
wilcox.test(x[1:50], conf.int = TRUE)$estimate
HodgesLehmann(x[1:49])
wilcox.test(x[1:49], conf.int = TRUE)$estimate
library(ModTools)
d.pim <- SplitTrainTest(d.pima, p = 0.2)
mdiab <- formula(diabetes ~ pregnant + glucose + pressure + triceps
+                             + insulin + mass + pedigree + age)
r.glm <- FitMod(mdiab, data=d.pim$train, fitfn="logit")
r.rp <- FitMod(mdiab, data=d.pim$train, fitfn="rpart")
r.rf <- FitMod(mdiab, data=d.pim$train, fitfn="randomForest")
r.svm <- FitMod(mdiab, data=d.pim$train, fitfn="svm")
r.c5 <- FitMod(mdiab, data=d.pim$train, fitfn="C5.0")
r.nn <- FitMod(mdiab, data=d.pim$train, fitfn="nnet")
r.nb <- FitMod(mdiab, data=d.pim$train, fitfn="naive_bayes")
r.nn <- FitMod(mdiab, data=d.pim$train, fitfn="nnet")
r.nb <- FitMod(mdiab, data=d.pim$train, fitfn="naive_bayes")
r.lda <- FitMod(mdiab, data=d.pim$train, fitfn="lda")
r.qda <- FitMod(mdiab, data=d.pim$train, fitfn="qda")
r.lb <- FitMod(mdiab, data=d.pim$train, fitfn="lb")
mods <- list(glm=r.glm, rp=r.rp, rf=r.rf, svm=r.svm, c5=r.c5
, nn=r.nn, nb=r.nb, lda=r.lda, qda=r.qda, lb=r.lb)
# insight in the Regression tree
plot(r.rp, box.palette = as.list(Pal("Helsana", alpha = 0.5)))
# Insample accuracy ...
TModC(mods[c(3)], ord="auc")
BrierScore(r.rf)
model.extract(r.glm$model, "response")
data_name = getCall(r.rf)$data
eval(data_name)
model.response(model.frame(r.rf))
as.numeric(model.extract(r.rp$model, "response")) - 1
as.numeric(model.response(model.frame(r.rp))) - 1
as.numeric(model.response(model.frame(r.glm))) - 1
as.numeric(model.response(model.frame(r.rf))) - 1
as.numeric(model.response(model.frame(r.svm))) - 1
as.numeric(model.response(model.frame(r.nn))) - 1
as.numeric(model.response(model.frame(r.lda))) - 1
as.numeric(model.response(model.frame(r.qda))) - 1
as.numeric(model.response(model.frame(r.lb))) - 1
as.numeric(model.response(model.frame(r.c5))) - 1
as.numeric(model.response(model.frame(r.nb))) - 1
as.numeric(model.extract(r.c5$model, "response")) - 1
data_name = getCall(r.c5)$data
eval(data_name)
r.c5$re
ModTools::Response
x <- r.rf
NumResponse <- function(x){
x$terms <- eval(x$call$formula)
as.numeric(model.response(model.frame(x))) - 1
}
NumResponse(r.glm)
resp(r.rp)
resp(r.rf)
resp(r.svm)
resp(r.nn)
resp(r.lda)
resp(r.qda)
resp(r.lb)
resp(r.c5)
resp(r.nb)
model.extract(r.glm$model, "response")
DescTools::Desc(model.extract(r.glm$model, "response"))
r.lm <- FitMod(temperature ~ delivery_min + area, d.pizza)
r.lm
r.lm
r.lm
getMethods(r.lm)
findMethods(r.lm)
findMethods("FitMod")
getMethods("FitMod")
showMethods("FitMod")
getMethods("FitMod")
findMethods("FitMod")
methods("FitMod")
getAnywhere("FitMod")
getAnywhere("print.FitMod")
getAnywhere("print.FitMod")[]
getAnywhere("print.FitMod")[1]
getAnywhere("print.FitMod")[2]
getAnywhere("print.FitMod")[1]
getAnywhere("print.FitMod")
getAnywhere("print.FitMod")[[1]]
DescTools::Str(getAnywhere("print.FitMod")[1], max.level=1)
install.packages("sloop")
)
sloop::s3_dispatch(ModTools:::print.FitMod)
DescTools::Str(r.lm, max.level=1)
sloop::s3_dispatch(r.lm)
sloop::s3_dispatch(print(r.lm))
unclass(r.lm)
class(unclass(r.lm))
S3Class(r.lm)
class(r.lm)
r.lm <- FitMod(temperature ~ delivery_min + area, d.pizza)
r.lm
r.rf <- FitMod(temperature ~ delivery_min + area, d.pizza, fitfn = "randomForest")
r.rf
summary(r.lm)
DescToolsAddIns:::BuildModel()
r.logit <- FitMod(diabetes ~ glucose + mass + age, data=d.pima2)
r.logit <- FitMod(diabetes ~ glucose + mass + age, data=d.pima2, fitfn = "logit")
r.logit
summary(r.logit)
OddsRatio(r.logit)
r.lm
r.lm <- FitMod(temperature ~ delivery_min + area + driver, d.pizza)
r.lm <- FitMod(temperature ~ delivery_min + area + driver, d.pizza)
r.lm
ModTools:::print.FitMod.lm(r.logit)
r.logit <- FitMod(diabetes ~ glucose + mass + CutAge(age), data=d.pima2, fitfn = "logit")
summary(r.logit)
r.logit
ModTools:::print.FitMod.lm(r.logit)
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + area + driver, d.pizza)
r.lm
summary(r.lm)
debug(ModTools:::print.FitMod.lm)
r.lm
r.lm
names(ref)[i]
ref
gettextf(".~. - %s", names(ref)[i])
head(model.frame(x))
drop1(r.lm)
drop1(r.lm, test="F")
unclass(drop1(r.lm, test="F"))
drop1(r.lm, test="F")$`Pr(>F)`
DescTools::Str(drop1(r.lm, test="F")$`Pr(>F)`, max.level=1)
DescTools::Str(drop1(r.lm, test="F"), max.level=1)
paov <- drop1(r.lm, test="F")$`Pr(>F)`
paov
paov <- drop1(r.lm, test="F")
DescTools::Str(paov, max.level=1)
rownames(paov)
DescTools::Abstract(d.pizza)
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver, d.pizza)
r.lm
r.lm <- FitMod(temperature ~ delivery_min + price + driver, d.pizza)
r.lm
drop1(r.lm)
drop1(r.lm, test="F")
unclass(r.lm)
DescTools::Str(r.lm, max.level=1)
DescTools::Str(r.lm$model, max.level=1)
attr(r.lm$model, "factors")
terms(r.lm$model)
attr(terms(r.lm$model), "factors")
DescTools::lines.lm()
DescTools::lines.lm
DescTools:::.CalcTrendline
model.extract(r.lm)
r.lm
undebug(ModTools:::print.FitMod.lm)
model.extract(r.lm)
model.extract(model.frame(r.lm))
RefLevel(r.lm)
RefLevel
drop1(r.lm, test="F", scope= ~ RefLevel(r.lm)
)
RefLevel(r.lm)
drop1(r.lm, test="F", scope= ~ names(RefLevel(r.lm)))
r.lm
drop1(r.lm, test="F", scope= ~ names(RefLevel(r.lm)))
drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+"))))
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver, d.pizza)
drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+"))))
r.lm
summary(r.lm)
RefLevel(r.lm)
RefLevel
model.matrix(r.lm)
head(model.matrix(r.lm))
RefLevel
allvars(r.lm$model)
allvar(r.lm$model)
all.vars(r.lm$model)
all.vars(r.lm)
all.vars(formula(r.lm))
terms(r.lm)
attr(terms(r.lm), "factors")
RefLevel
names(grep("factor", attr(x[["terms"]], "dataClasses"), value=TRUE))
x <- r.lm
names(grep("factor", attr(x[["terms"]], "dataClasses"), value=TRUE))
names(grep("factor|ordered", attr(x[["terms"]], "dataClasses"), value=TRUE))
r.lm <- FitMod(temperature ~ factor(CutAge(delivery_min)) + price + driver, d.pizza)
r.lm
x <- r.lm
names(grep("factor|ordered", attr(x[["terms"]], "dataClasses"), value=TRUE))
drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+"))))
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver, d.pizza)
summary(r.lm)
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver, d.pizza)
r.lm
drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+"))))
RefLevel(r.lm)
names(RefLevel(r.lm))
gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+")
gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+"))
gettextf("~ %s", paste(names(RefLevel(r.lm)), sep="+"))
drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), collapse="+"))))
DescTools::Str(drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), collapse="+")))), max.level=1)
dddrop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), collapse="+"))))
dd <- drop1(r.lm, test="F", scope= formula(gettextf("~ %s", paste(names(RefLevel(r.lm)), collapse="+"))))
dd[names(RefLevel(r.lm)),]
dd[names(RefLevel(r.lm)), "names(grep("factor", attr(x[["terms"]], "dataClasses"), value=TRUE))"]
dd[names(RefLevel(r.lm)), "Pr(>F)"]
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver, d.pizza)
r.lm
debug(ModTools:::print.FitMod.lm)
r.lm
anova_p
out
rbind(c(rep(".", 3),
gettextf("%s", gsub(" ", "", Format(p, fmt="p", eps=10^-pdigits, digits=pdigits))),
Format(p, fmt="*") ))
rnr
rnr
names(ref)
rownames(out)
grep(gettextf("^%s", names(ref)[i]), rownames(out))
names(ref)
grep(gettextf("^%s", names(ref)[i]), rownames(out), fixed=TRUE)
grep(gettextf("%s", names(ref)[i]), rownames(out), fixed=TRUE)
chartr(names(RefLevel(r.lm)))
names(RefLevel(r.lm))
chartr("\^$.?*|+()[{", "\^$.?*|+()[{", names(RefLevel(r.lm)))
chartr("\\^$.?*|+()[{", "\^$.?*|+()[{", names(RefLevel(r.lm)))
chartr("\\^$.?*|+()[{", "\\^$.?*|+()[{", names(RefLevel(r.lm)))
chartr("\\^$.?*|+()[{", "\\\\^\\$\\.\\?\\*\\|\\+\\(\\)\\[\\{", names(RefLevel(r.lm)))
gsub("()", "\\1\\1", names(RefLevel(r.lm)))
gsub("\\(\\)", "\\1\\1", names(RefLevel(r.lm)))
gsub("\\(", "\\1\\1", names(RefLevel(r.lm)))
gsub("\\(", "\\\\1", names(RefLevel(r.lm)))
gsub("\\(", "\\ \\1", names(RefLevel(r.lm)))
gsub("\\(", "\\1\\1", names(RefLevel(r.lm)))
gsub("\\(", "\\1", names(RefLevel(r.lm)))
gsub("\\(", "+", names(RefLevel(r.lm)))
gsub("\\(", "+\\1", names(RefLevel(r.lm)))
gsub("\\(", "+1", names(RefLevel(r.lm)))
gsub("\\(", "+\1", names(RefLevel(r.lm)))
gsub("\\(", "+\\1", names(RefLevel(r.lm)))
gsub("\\(", "[((]", names(RefLevel(r.lm)))
gsub("\\(", "[\\(]", names(RefLevel(r.lm)))
gsub("\\(", "\\(", names(RefLevel(r.lm)))
gsub("\\(", "\\1\\1", names(RefLevel(r.lm)), pearl=TRUE)
gsub("\\(", "\\1\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(\\)", "\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(\\)", "+", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(|\\)", "+", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(|\\)", "+\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(|\\)", "8\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\()|(\\))", "8\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\()|(\\))", "\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(\\))", "\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(\\))", "\\1\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(\\))", "\\1\\1\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(\\))", "\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(\\))", "+\\1*", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", "+\\1*", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", "\\1\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", "\\\\1\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", "\\\\1", names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", paste("\\"," \\1"), names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", paste("\\"," \\1", sep=""), names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", paste("\\"," \\1", collapse=""), names(RefLevel(r.lm)), perl = TRUE)
paste("\\"," \\1", collapse="")
gsub("(\\(|\\))", paste("\\","\\1", collapse=""), names(RefLevel(r.lm)), perl = TRUE)
paste("\\","\\1", collapse="")
gsub("(\\(|\\))", paste0("\\","\\1", collapse=""), names(RefLevel(r.lm)), perl = TRUE)
paste0("\\","\\1", collapse="")
paste("\\","\\1", collapse="")
gsub("(\\(|\\))", paste("\\","\\1", collapse=""), names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", paste0("\\","\\1", collapse=""), names(RefLevel(r.lm)), perl = TRUE)
gsub("(\\(|\\))", paste0("\\","\\1", collapse=""), names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(", "\\\\(", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(", "\\(", names(RefLevel(r.lm)), perl = TRUE)
gsub("\\(", "\\(\\(", names(RefLevel(r.lm)), perl = TRUE)
gsub("[^a-zA-Z0-9]", "", names(RefLevel(r.lm)))
names(RefLevel(r.lm))
gsub("[^a-zA-Z0-9_]", "", names(RefLevel(r.lm)))
gsub("[^a-zA-Z0-9_]", " ", names(RefLevel(r.lm)))
r.lm
r.lm
anova(r.lm, update(r.lm, .~. - driver))
anova(r.lm, update(r.lm, .~. - driver), data=model.frame(r.lm))
r.lm
anova(r.lm, update(r.lm, .~. - driver, data=model.frame(r.lm)))
model.frame(r.lm)
anova(r.lm, update(r.lm, .~. - driver, data=model.data(r.lm)))
drop1(r.lm)
drop1(r.lm, test="F")
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver + area, d.pizza)
r.lm
drop1(r.lm, test="F")
r.lm <- FitMod(temperature ~ poly(delivery_min) + price + driver, d.pizza)
r.lm
r.lm <- FitMod(temperature ~ poly(delivery_min, 2) + price + driver, d.pizza)
r.lm
r.lm <- FitMod(temperature ~ CutAge(delivery_min) + price + driver + area,
na.omit(d.pizza))
r.lm
anova(r.lm, update(r.lm, .~. - driver, data=model.data(r.lm)))
anova(r.lm, update(r.lm, .~. - driver))
anova(r.lm, update(r.lm, .~. - CutAge(delivery_min)))
anova(r.lm, update(r.lm, .~. - area))
r.swiss <- FitMod(Fertility ~ ., swiss, fitfn="lm")
r.swiss
summary(r.swiss)
debug(ModTools:::print.FitMod.lm)
r.swiss
r.swiss
gettextf("~ %s",
paste(names(ref),
collapse="+"))
formula(gettextf("~ %s",
paste(names(ref),
collapse="+")))
formula(gettextf("~ %s",
paste(names(ref),
collapse="+"))
formula(gettextf("~ %s",
r.lm
r.swiss <- FitMod(Fertility ~ ., swiss, fitfn="lm")
r.swiss
r.lm
r.swiss
